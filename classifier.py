# -*- coding: utf-8 -*-
"""versity project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17gsOya-ExXfRi_WvYcXzGmHgMHiHtT2G
"""


import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split
from sklearn import metrics
from sklearn.tree import export_graphviz
from sklearn.externals.six import StringIO
from IPython.display import Image
import pydotplus

column_names = ["age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca",
                "thal", "status"]



url = "processed.cleveland.data"
data_frame = pd.read_csv(url, names=column_names)

print(data_frame)

"""changing columns to proper datatype"""

data_type_needs_to_be_changed = ['sex', 'cp', 'fbs', 'restecg', 'exang', 'slope', 'ca', 'thal', 'status']
for columns in data_type_needs_to_be_changed:
    data_frame[columns] = data_frame[columns].astype('category')

"""changing the value of the status column in order to change the status in either or 1
as 0 indicates there is no heart diseases and the other numbers indicates there is heart disease
"""

data_frame['status'] = data_frame['status'].replace(to_replace=[2, 3, 4], value=[1, 1, 1])
print(data_frame)

"""split dataset into training set and test set"""

feature_column_names = ["age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak",
                        "slope", "ca",
                        "thal"]

feature_columns = data_frame[feature_column_names]
target_variable = data_frame.status
x_train, x_test, y_train, y_test = train_test_split(feature_columns, target_variable, test_size=.3, random_state=1)

print(x_train)
print(y_train)

"""classifier is made"""

classifier = DecisionTreeClassifier()

classifier = classifier.fit(x_train, y_train)

"""prediction done one the test data and accuracy is calculated"""

y_pred = classifier.predict(x_test)

print("Accuracy:", metrics.accuracy_score(y_test, y_pred))

"""showing the decision tree"""

dot_data = StringIO()

export_graphviz(classifier, out_file=dot_data, filled=True, rounded=True, special_characters=True,
                feature_names=feature_column_names, class_names=['0', '1'])

graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png('tree.png')
Image(graph.create_png())

"""pruning the decision tree and creating a new classifier to observe the change in the accuracy and the difference between the decision trees"""

classifier = DecisionTreeClassifier(criterion="entropy", max_depth=3)

classifier = classifier.fit(x_train, y_train)

y_pred = classifier.predict(x_test)

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

dot_data = StringIO()

export_graphviz(classifier, out_file=dot_data, filled=True, rounded=True, special_characters=True,
                feature_names=feature_column_names, class_names=['0', '1'])

graph = pydotplus.graph_from_dot_data(dot_data.getvalue())
graph.write_png('tree2.png')
Image(graph.create_png())